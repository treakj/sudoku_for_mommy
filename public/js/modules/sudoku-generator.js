/**
 * Gerador de Puzzles Sudoku
 * Classe respons√°vel por gerar novos puzzles v√°lidos de Sudoku
 */

export class SudokuGenerator {
    constructor() {
        this.grid = this.createEmptyGrid();
    }

    /**
     * Cria uma grade vazia 9x9
     * @returns {number[][]} Grid vazio
     */
    createEmptyGrid() {
        return Array(9).fill(0).map(() => Array(9).fill(0));
    }

    /**
     * Gera um novo puzzle de Sudoku
     * @param {string} difficulty - N√≠vel de dificuldade (easy, medium, hard, expert, insane)
     * @returns {object} Objeto contendo puzzle e solu√ß√£o
     */
    generate(difficulty) {
        console.log('üîß Iniciando gera√ß√£o do puzzle...');
        this.grid = this.createEmptyGrid();
        
        console.log('üîß Preenchendo grid...');
        this._fillGrid(this.grid);
        
        // Cria uma c√≥pia da solu√ß√£o completa
        const solution = this.grid.map(row => [...row]);
        console.log('‚úÖ Grid preenchido com sucesso');
        
        console.log('üîß Removendo n√∫meros para dificuldade:', difficulty);
        // Remove n√∫meros baseado na dificuldade (com verifica√ß√£o de unicidade)
        this._removeNumbers(this.grid, difficulty);
        
        // üîç VALIDA√á√ÉO FINAL
        console.log('üîç Validando puzzle final...');
        const validationResult = this._validatePuzzle(this.grid, solution);
        
        if (!validationResult.isValid) {
            console.error('‚ùå Puzzle inv√°lido gerado:', validationResult.errors);
            // Em caso de erro, tenta novamente ou usa backup
            return this._generateFallback(difficulty);
        }
        
        console.log('‚úÖ Puzzle validado com sucesso!');
        console.log(`üìä Estat√≠sticas: ${validationResult.stats.filledCells} c√©lulas preenchidas, ${validationResult.stats.emptyCells} vazias`);
        
        return {
            puzzle: this.grid,
            solution: solution,
            stats: validationResult.stats
        };
    }

    /**
     * üîç VALIDADOR FINAL DO PUZZLE
     * Verifica se o puzzle gerado √© v√°lido e resolv√≠vel
     * @param {number[][]} puzzle - Puzzle a validar
     * @param {number[][]} expectedSolution - Solu√ß√£o esperada
     * @returns {object} Resultado da valida√ß√£o
     */
    _validatePuzzle(puzzle, expectedSolution) {
        const errors = [];
        const stats = {
            filledCells: 0,
            emptyCells: 0,
            hasUniqueSolution: false,
            solutionMatches: false
        };
        
        // Conta c√©lulas
        for (let r = 0; r < 9; r++) {
            for (let c = 0; c < 9; c++) {
                if (puzzle[r][c] === 0) {
                    stats.emptyCells++;
                } else {
                    stats.filledCells++;
                }
            }
        }
        
        // Verifica se tem solu√ß√£o √∫nica
        console.log('üîç Verificando se tem solu√ß√£o √∫nica...');
        stats.hasUniqueSolution = this._hasUniqueSolution(puzzle);
        
        if (!stats.hasUniqueSolution) {
            errors.push('Puzzle n√£o tem solu√ß√£o √∫nica');
        }
        
        // Verifica se a solu√ß√£o est√° correta
        console.log('üîç Verificando se solu√ß√£o est√° correta...');
        const puzzleCopy = puzzle.map(row => [...row]);
        if (this._fillGrid(puzzleCopy)) {
            stats.solutionMatches = this._gridsMatch(puzzleCopy, expectedSolution);
            if (!stats.solutionMatches) {
                errors.push('Solu√ß√£o n√£o confere com a esperada');
            }
        } else {
            errors.push('Puzzle n√£o pode ser resolvido');
        }
        
        return {
            isValid: errors.length === 0,
            errors: errors,
            stats: stats
        };
    }

    /**
     * üÜö COMPARADOR DE GRIDS
     * Verifica se dois grids s√£o id√™nticos
     */
    _gridsMatch(grid1, grid2) {
        for (let r = 0; r < 9; r++) {
            for (let c = 0; c < 9; c++) {
                if (grid1[r][c] !== grid2[r][c]) {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * üö® GERADOR DE BACKUP
     * Gera puzzle simples se o principal falhar
     */
    _generateFallback(difficulty) {
        console.warn('üö® Usando gerador de backup devido a falha na valida√ß√£o');
        
        // Usa puzzle pr√©-definido v√°lido
        const fallbackPuzzle = [
            [5, 3, 0, 0, 7, 0, 0, 0, 0],
            [6, 0, 0, 1, 9, 5, 0, 0, 0],
            [0, 9, 8, 0, 0, 0, 0, 6, 0],
            [8, 0, 0, 0, 6, 0, 0, 0, 3],
            [4, 0, 0, 8, 0, 3, 0, 0, 1],
            [7, 0, 0, 0, 2, 0, 0, 0, 6],
            [0, 6, 0, 0, 0, 0, 2, 8, 0],
            [0, 0, 0, 4, 1, 9, 0, 0, 5],
            [0, 0, 0, 0, 8, 0, 0, 7, 9]
        ];
        
        const fallbackSolution = [
            [5, 3, 4, 6, 7, 8, 9, 1, 2],
            [6, 7, 2, 1, 9, 5, 3, 4, 8],
            [1, 9, 8, 3, 4, 2, 5, 6, 7],
            [8, 5, 9, 7, 6, 1, 4, 2, 3],
            [4, 2, 6, 8, 5, 3, 7, 9, 1],
            [7, 1, 3, 9, 2, 4, 8, 5, 6],
            [9, 6, 1, 5, 3, 7, 2, 8, 4],
            [2, 8, 7, 4, 1, 9, 6, 3, 5],
            [3, 4, 5, 2, 8, 6, 1, 7, 9]
        ];
        
        return {
            puzzle: fallbackPuzzle.map(row => [...row]),
            solution: fallbackSolution.map(row => [...row]),
            stats: { filledCells: 40, emptyCells: 41, fallback: true }
        };
    }

    /**
     * Preenche o grid com n√∫meros v√°lidos usando backtracking
     * @param {number[][]} grid - Grid a ser preenchido
     * @returns {boolean} True se conseguiu preencher, false caso contr√°rio
     */
    _fillGrid(grid) {
        const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];
        const find = this._findEmpty(grid);
        
        if (!find) {
            return true; // Grid completamente preenchido
        }
        
        const [row, col] = find;
        this._shuffle(numbers);
        
        for (const num of numbers) {
            if (this._isValid(grid, row, col, num)) {
                grid[row][col] = num;
                
                if (this._fillGrid(grid)) {
                    return true;
                }
                
                grid[row][col] = 0; // Backtrack
            }
        }
        
        return false;
    }

    /**
     * Remove n√∫meros do grid baseado na dificuldade
     * VERS√ÉO MELHORADA: Garante solu√ß√£o √∫nica
     * @param {number[][]} grid - Grid para remover n√∫meros
     * @param {string} difficulty - N√≠vel de dificuldade
     */
    _removeNumbers(grid, difficulty) {
        const targetRemovals = {
            easy: 40,
            medium: 50,
            hard: 56,
            expert: 61,
            insane: 64
        };
        
        const targetCount = targetRemovals[difficulty] || targetRemovals.medium;
        let removedCount = 0;
        let attempts = 0;
        const maxAttempts = 1000; // Evita loop infinito
        
        console.log(`üéØ Meta: remover ${targetCount} n√∫meros mantendo solu√ß√£o √∫nica`);
        
        // Lista de todas as c√©lulas preenchidas
        const filledCells = [];
        for (let r = 0; r < 9; r++) {
            for (let c = 0; c < 9; c++) {
                if (grid[r][c] !== 0) {
                    filledCells.push([r, c]);
                }
            }
        }
        
        // Embaralha para remo√ß√£o aleat√≥ria
        this._shuffle(filledCells);
        
        // Remove n√∫meros mantendo solu√ß√£o √∫nica
        for (const [row, col] of filledCells) {
            if (removedCount >= targetCount || attempts >= maxAttempts) break;
            
            attempts++;
            const originalValue = grid[row][col];
            
            // Remove temporariamente
            grid[row][col] = 0;
            
            // Verifica se ainda tem solu√ß√£o √∫nica
            if (this._hasUniqueSolution(grid)) {
                // ‚úÖ Pode remover - solu√ß√£o ainda √© √∫nica
                removedCount++;
                console.log(`‚úÖ Removido: posi√ß√£o (${row},${col}) = ${originalValue} [${removedCount}/${targetCount}]`);
            } else {
                // ‚ùå N√£o pode remover - restaura valor
                grid[row][col] = originalValue;
                console.log(`‚ùå Restaurado: posi√ß√£o (${row},${col}) = ${originalValue} (perderia unicidade)`);
            }
        }
        
        console.log(`üéØ Resultado: ${removedCount} n√∫meros removidos de ${targetCount} desejados`);
        console.log(`üîç Tentativas: ${attempts} de ${maxAttempts} m√°ximas`);
    }

    /**
     * üîç VERIFICADOR DE SOLU√á√ÉO √öNICA
     * Verifica se o puzzle tem exatamente uma solu√ß√£o
     * @param {number[][]} grid - Grid para verificar
     * @returns {boolean} True se tem solu√ß√£o √∫nica
     */
    _hasUniqueSolution(grid) {
        const gridCopy = grid.map(row => [...row]);
        const solutions = [];
        
        // Busca at√© 2 solu√ß√µes (se encontrar 2, n√£o √© √∫nica)
        this._countSolutions(gridCopy, solutions, 2);
        
        return solutions.length === 1;
    }

    /**
     * üî¢ CONTADOR DE SOLU√á√ïES (Backtracking Otimizado)
     * Conta quantas solu√ß√µes o puzzle tem
     * @param {number[][]} grid - Grid atual
     * @param {number[][]} solutions - Array para armazenar solu√ß√µes
     * @param {number} maxSolutions - M√°ximo de solu√ß√µes a buscar
     * @returns {boolean} True se deve continuar buscando
     */
    _countSolutions(grid, solutions, maxSolutions) {
        if (solutions.length >= maxSolutions) {
            return false; // Para de buscar se j√° encontrou o suficiente
        }
        
        const emptyCell = this._findEmpty(grid);
        
        if (!emptyCell) {
            // Grid completo - encontrou uma solu√ß√£o
            solutions.push(grid.map(row => [...row]));
            return solutions.length < maxSolutions;
        }
        
        const [row, col] = emptyCell;
        
        // Tenta n√∫meros 1-9 (sem embaralhar para ser determin√≠stico)
        for (let num = 1; num <= 9; num++) {
            if (this._isValid(grid, row, col, num)) {
                grid[row][col] = num;
                
                // Recurs√£o
                if (!this._countSolutions(grid, solutions, maxSolutions)) {
                    grid[row][col] = 0; // Backtrack
                    return false; // Para se j√° encontrou solu√ß√µes suficientes
                }
                
                grid[row][col] = 0; // Backtrack
            }
        }
        
        return true;
    }

    /**
     * Verifica se um n√∫mero pode ser colocado em uma posi√ß√£o
     * @param {number[][]} grid - Grid atual
     * @param {number} row - Linha
     * @param {number} col - Coluna
     * @param {number} num - N√∫mero a ser testado
     * @returns {boolean} True se v√°lido, false caso contr√°rio
     */
    _isValid(grid, row, col, num) {
        // Verifica linha e coluna
        for (let i = 0; i < 9; i++) {
            if (grid[row][i] === num) return false;
            if (grid[i][col] === num) return false;
        }
        
        // Verifica o quadrante 3x3
        const startRow = Math.floor(row / 3) * 3;
        const startCol = Math.floor(col / 3) * 3;
        
        for (let i = 0; i < 3; i++) {
            for (let j = 0; j < 3; j++) {
                if (grid[startRow + i][startCol + j] === num) {
                    return false;
                }
            }
        }
        
        return true;
    }

    /**
     * Encontra a primeira c√©lula vazia no grid
     * @param {number[][]} grid - Grid para buscar
     * @returns {number[]|null} [row, col] da primeira c√©lula vazia ou null
     */
    _findEmpty(grid) {
        for (let r = 0; r < 9; r++) {
            for (let c = 0; c < 9; c++) {
                if (grid[r][c] === 0) {
                    return [r, c];
                }
            }
        }
        return null;
    }

    /**
     * Embaralha um array usando algoritmo Fisher-Yates
     * @param {any[]} array - Array a ser embaralhado
     */
    _shuffle(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
    }
}
